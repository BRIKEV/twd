const d=e=>{try{return new RegExp(e),!0}catch{return!1}},i=e=>/\.([a-zA-Z0-9]+)$/.test(e);function f(e,s,n){return n.find(t=>{const o=t.method.toLowerCase()===e.toLowerCase();if(t.urlRegex&&d(t.url)){const r=new RegExp(t.url);return o&&r.test(s)}if(i(t.url))return o&&s.includes(t.url);const c=t.url===s||s.includes(t.url);return o&&c&&!i(s)})}function h(e,s,n){e.forEach(t=>t.postMessage({type:"EXECUTED",alias:s.alias,request:n}))}const y=(e,s,n)=>{const o=![204,205,304].includes(s),l=o?JSON.stringify(e):null;return new Response(l,{status:s,headers:o?n||{"Content-Type":"application/json"}:n||{}})};let a=[];const p=async e=>{const{method:s}=e.request,n=e.request.url,t=f(s,n,a);t&&(console.log("[TWD] Mock hit:",t.alias,s,n),e.respondWith((async()=>{let o=null;const l=e.request.headers.get("content-type")||"application/json";if(l.includes("application/json"))try{o=await e.request.clone().json()}catch{}else if(l.includes("form"))try{const c=await e.request.clone().formData();o={},c.forEach((r,u)=>{o[u]=r})}catch{}else if(l.includes("text"))try{o=await e.request.clone().text()}catch{}else if(l.includes("octet-stream"))try{o=await e.request.clone().arrayBuffer()}catch{}else if(l.includes("image"))try{o=await e.request.clone().blob()}catch{}else try{o=await e.request.clone().text()}catch{}return self.clients.matchAll().then(c=>{h(c,t,o)}),y(t.response,t.status??200,t.responseHeaders)})()))},g=e=>{const{type:s,rule:n}=e.data||{};s==="ADD_RULE"&&(a=a.filter(t=>t.alias!==n.alias),a.push(n),console.log("[TWD] Rule added:",n)),s==="CLEAR_RULES"&&(a=[],console.log("[TWD] All rules cleared"))};console.log("[TWD] Mock Service Worker loaded - version 0.7.1");self.addEventListener("fetch",p);self.addEventListener("message",g);
